# main.py

import sys
import os
from datetime import datetime

# --- Imports des √©tapes ETL ---

# √âtape 1: Extraction des UDI (D√©partement 59)
from src.api.get_udi import main_cloud_ready as extract_communes_udi

# √âtape 1: Extraction des R√©sultats de Qualit√© (D√©partement 59)
# NOTE: Vous devez avoir un script similaire appel√© 'get_resultats_qualite.py'
# qui r√©cup√®re les 1.8M de lignes et les sauve dans GCS/raw.
try:
    from src.api.get_resultats_qualite import main as extract_qualite_eau
except ImportError:
    print("Avertissement: Le script 'get_resultats_qualite.py' n'est pas trouv√©.")
    sys.exit(1)


# √âtape 2: Transformation (Inclut maintenant le filtrage des communes MEL)
from src.etl.process_resultats_qualite import main_cloud_ready as transform_qualite_eau

# √âtape 3: Chargement BigQuery
from src.load.load_to_bq import main as load_data_to_bq 


def run_pipeline():
    """
    Orchestre les trois √©tapes du pipeline ETL : Extraction, Transformation et Chargement.
    """
    start_time = datetime.now()
    print(f"üöÄ D√©marrage du pipeline ETL de l'eau potable √† {start_time.strftime('%Y-%m-%d %H:%M:%S')}...")

    # --- 1. EXTRACTION (API -> GCS/raw) ---
    try:
        print("\n--- √âTAPE 1: Extraction des donn√©es API vers GCS (raw) ---")
        
        # 1a. Extraction des UDI (Liste des UDI par commune du 59)
        extract_communes_udi()      
        
        # 1b. Extraction des r√©sultats de qualit√© (Les 1.8M de lignes)
        extract_qualite_eau()       
        
        print("‚úÖ √âtape 1 compl√©t√©e: Donn√©es brutes stock√©es dans GCS.")
    except Exception as e:
        print(f"‚ùå √âchec critique lors de l'extraction: {e}")
        # Arr√™ter le pipeline si l'extraction √©choue
        sys.exit(1)


    # --- 2. TRANSFORMATION (GCS/raw -> GCS/processed) ---
    # Cette √©tape filtre les donn√©es pour la MEL et cr√©e les 4 tables normalis√©es.
    try:
        print("\n--- √âTAPE 2: Transformation et Normalisation (Filtrage MEL) ---")
        transform_qualite_eau() 
        print("‚úÖ √âtape 2 compl√©t√©e: 4 tables normalis√©es cr√©√©es sur GCS (processed).")
    except Exception as e:
        print(f"‚ùå √âchec critique lors de la transformation: {e}")
        sys.exit(1)


    # --- 3. CHARGEMENT (GCS/processed -> BigQuery) ---
    try:
        print("\n--- √âTAPE 3: Chargement dans BigQuery ---")
        load_data_to_bq()
        print("‚úÖ √âtape 3 compl√©t√©e: Donn√©es charg√©es dans BigQuery.")
    except Exception as e:
        print(f"‚ùå √âchec critique lors du chargement dans BigQuery: {e}")
        sys.exit(1)


    # --- FIN DU PIPELINE ---
    end_time = datetime.now()
    duration = end_time - start_time
    print("\n---------------------------------------------------------")
    print(f"üöÄ PIPELINE ETL TERMIN√â avec succ√®s √† {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Dur√©e totale d'ex√©cution : {duration}")
    print("---------------------------------------------------------")


if __name__ == "__main__":
    # La fonction principale √† ex√©cuter dans l'environnement GitHub Actions
    run_pipeline()